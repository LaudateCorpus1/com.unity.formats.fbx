global string $UnityExportSets[];
global string $UnityFbxFilePathAttr = "unityFbxModelFilePath";
global string $UnityFbxFileNameAttr = "unityFbxModelFileName";
global string $UnityFbxAnimFilePathAttr = "unityFbxAnimFilePath";
global string $UnityFbxAnimFileNameAttr = "unityFbxAnimFileName";
global string $UnityExportSetNameFormat = "^1s_UnityExportSet";

global proc unityRemoveNativeMenuOnLoad(){
    $removeSendToUnityMenu = `optionVar -q "UnityFbxForMaya_removeSendToUnityMenu"`;
    if($removeSendToUnityMenu && `menu -exists "sendToUnityMenu"`){
        //Remove the GamePipeline 'SendToUnity' button
        menu -e -visible false "sendToUnityMenu";
    }
}

// Load a specified settings file
proc int loadUnityFbxSettings(string $fileName, string $settingType){
    // check if the file exists
    if (`file -q -ex $fileName` == false){
        error ("Failed to find Unity Fbx "+$settingType+" Settings at: " + $fileName);
        return false;
    }
    eval ("source \"" + $fileName + "\"");
    return true;
}


// Load the Export Settings from file
proc int loadUnityFbxExportSettings(){
    $fileName = `optionVar -q "UnityFbxExportSettings"`;
    return loadUnityFbxSettings($fileName, "Export");
}


// Load the Import Settings from a file
proc int loadUnityFbxImportSettings(){
    $fileName = `optionVar -q "UnityFbxImportSettings"`;
    return loadUnityFbxSettings($fileName, "Import");
}


proc string getAttribute(string $node, string $attr){
    if (`attributeExists $attr $node`){
        return `getAttr ($node + "." + $attr)`;
    }
    return "";
}


proc storeAttribute(string $node, string $attr, string $attrValue){
    $attrType="string";
    if (!attributeExists($attr, $node)){
        addAttr -shortName $attr -storable true -dataType $attrType $node;
    }
    setAttr ($node+"."+$attr) -type $attrType $attrValue;
}


proc int setExists(string $setName){
    return stringArrayContains($setName, `listSets -allSets`);
}

proc int loadUnityPlugin(string $plugin){
    if (`pluginInfo -q -loaded $plugin` == false){
        loadPlugin $plugin;
        if (`pluginInfo -q -loaded $plugin` == false){
            return false;
        }
    }
    return true;
};

proc importFile(string $filePathStr){
    // get the global variables
    global string $UnityExportSets[];
    global string $UnityFbxFilePathAttr;
    global string $UnityFbxFileNameAttr;
    global string $UnityFbxAnimFilePathAttr;
    global string $UnityFbxAnimFileNameAttr;
    global string $UnityExportSetNameFormat;

    $tempPath = dirname($filePathStr);
    $tempName = basename($filePathStr, "");
    $tempAnimPath = "";
    $tempAnimName = "";
    $nameWithoutExt = basename($filePathStr, ".fbx");
    
    $isAnimFile = false;
    if(match("@", basename($filePathStr, ".fbx")) != ""){
        // import as animation
        $isAnimFile = true;
        $tempAnimPath = $tempPath;
        $tempAnimName = $tempName;
        
        $nameWithoutExt = match("[^@]+", $nameWithoutExt);
    }
    $unityExportSet = `format -stringArg $nameWithoutExt $UnityExportSetNameFormat`;

    // Gather everything that is in the scene
    $origItemsInScene = `ls -tr -o -r true`;
        
    // Get or create the Unity Fbx Export Set
    $setCreated = false;
    if (!setExists($unityExportSet)){
        // couldn't find export set so create it
        sets -name $unityExportSet;
        $setCreated = true;
    }
    
    // unlock set so we can add attributes to it
    lockNode -lock false $unityExportSet;
    
    if(!$isAnimFile){
        // reset attribute values, in case import fails
        storeAttribute($unityExportSet, $UnityFbxFilePathAttr, "");
        storeAttribute($unityExportSet, $UnityFbxFileNameAttr, "");
    }
    
    FBXImport -f $filePathStr;
    
    if ((!$isAnimFile || ($isAnimFile && $setCreated)) && $tempPath != ""){
        storeAttribute($unityExportSet, $UnityFbxFilePathAttr, $tempPath);
        
        // Change Unity project if fbx is from a different Unity project.
        // Get the project based on the folder structure (i.e. folder above Assets)
        $head = dirname($tempPath);
        $tail = basename($tempPath, "");
        // Check that we are not at the root directory.
        // dirname($head) returns the last directory name in the path, 
        // or head if head is the root directory.
        while ($head != "" && dirname($head) != $head){
            if (`strcmp $tail "Assets"` == 0){
                // this is a valid Unity project, so set it
                optionVar -sv "UnityProject" $head;
                break;
            }
            $head = dirname($head);
            $tail = basename($head, "");
        }
    }
    
    if ((!$isAnimFile || ($isAnimFile && $setCreated)) && $tempName != ""){
        storeAttribute($unityExportSet,$UnityFbxFileNameAttr,$tempName);
    }
    
    if($tempAnimPath != ""){
        storeAttribute($unityExportSet,$UnityFbxAnimFilePathAttr,$tempAnimPath);
    }
    
    if($tempAnimName != ""){
        storeAttribute($unityExportSet,$UnityFbxAnimFileNameAttr,$tempAnimName);
    }
    
    if (setExists($unityExportSet) == true){
        // figure out what has been added after import
        $itemsInScene = `ls -tr -o -r true`;
        
        $newItems = stringArrayRemove($origItemsInScene, $itemsInScene);
        
        // add newly imported items to set
        if (size($newItems) > 0){
            sets -include $unityExportSet $newItems;
        }
        // lock set so it doesn't get deleted when empty
        lockNode -lock true $unityExportSet;
        
        if(!stringArrayContains($unityExportSet, $UnityExportSets)){
            $UnityExportSets[size($UnityExportSets)] = $unityExportSet;
        }
    }
}


global proc int loadUnityDependencies(){
    // GamePipeline plugin 'SendToUnitySelection' command used in export
    $pluginsToLoad = {"GamePipeline", "fbxmaya"};
    
    $ext = "mll";
    if (`about -macOS` == true){
        $ext = "bundle";
    }
            
    // iterate over all the plugins, loading them with extenstion ext, and combining the results
    // to return if any of the loads failed
    $result = true;
    for($plugin in $pluginsToLoad){
        $result = $result && `loadUnityPlugin ($plugin + "." + $ext)`;
    }
    
    unityRemoveNativeMenuOnLoad();
    
    return $result;
}

global proc unityImport(){
    if(!loadUnityDependencies()){
        error("Failed to load Unity dependencies");
        return;
    }
    
    if(!loadUnityFbxImportSettings()){
        return;
    }
        
    $unityProject = `optionVar -q "UnityProject"`;
    
    $filePaths = `fileDialog2 -dialogStyle 2 -caption "FBX Import" -dir ($unityProject + "/Assets") -fileFilter "*.fbx" -selectFileFilter "FBX" -fileMode 4`;
    
    // store path and filename
    if(size($filePaths) <= 0){
        return;
    }
    for($i=0; $i<size($filePaths); ++$i){
        $filePathStr = $filePaths[$i];
        importFile($filePathStr);
    }
}


global proc unityExport(){
    // get the global variables
    global string $UnityExportSet;
    global string $UnityFbxFilePathAttr;
    global string $UnityFbxFileNameAttr;
    
    if(!loadUnityDependencies()){
        return;
    }
    
    if(!loadUnityFbxExportSettings()){
        return;
    }
    
    // select the export set for export, if it exists,
    // otherwise take what is currently selected
    $origSelection = `ls -sl`;
    if (setExists($UnityExportSet)){
        select -r -ne $UnityExportSet;
    }
    
    $unity_fbx_file_path = getAttribute($UnityExportSet, $UnityFbxFilePathAttr);
    $unity_fbx_file_name = getAttribute($UnityExportSet, $UnityFbxFileNameAttr);
    
    $strCmd = "";
    if ($unity_fbx_file_path != "" && $unity_fbx_file_name != ""){
        $strCmd = "file -force -options \"\" -typ \"FBX export\" -pr -es \"" + $unity_fbx_file_path + "/" + $unity_fbx_file_name + "\"";
    }
    else {
        $strCmd = "SendToUnitySelection";
    }
    eval $strCmd;
    
    select -cl;
    if (size($origSelection) > 0){    
        select -add -ne $origSelection;
    }
}