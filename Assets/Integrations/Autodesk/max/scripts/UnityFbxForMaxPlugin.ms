-- MacroScripts that will perform actions
macroScript UnityImport category:"Unity"
(
    origObjects = #()

    persistent global unityFbxFilePathAttr
    persistent global unityFbxFileNameAttr
    
    global afterImport
    fn afterImport = (
        unityFbxExportSet = #()
        currSet = selectionSets["UnityFbxExportSet"]
        if not isdeleted currSet and currSet != undefined then (
            unityFbxExportSet = unityFbxExportSet + currSet
        )
        for obj in objects do(
            if findItem origObjects obj == 0 then(
                -- add to selection set
                append unityFbxExportSet obj
            )
        )
        selectionSets["UnityFbxExportSet"] = unityFbxExportSet
    );

    -- Make sure the FbxImporter plugin is loaded
    pluginManager.loadClass FbxImporter
    
    unityProjectPath = getINISetting (GetMAXIniFile()) "Unity" "UnityProject"
    fbxFileName = getOpenFileName caption:"Import FBX from Unity" filename:(unityProjectPath + "/Assets/")  types:"FBX (*.fbx)|*.fbx|"
    if fbxFileName != undefined then
    (
        -- reset persistent values, in case import fails
        unityFbxFilePathAttr = ""
        unityFbxFileNameAttr = ""
    
        -- Get all objects in scene before importAction
        origObjects = objects as array
        callbacks.addScript #postImport ("afterImport()") id:#unityPlugin

        importFile fbxFileName using:FBXIMP
        
        unityFbxFilePathAttr = getFilenamePath fbxFileName
        unityFbxFileNameAttr = filenameFromPath fbxFileName
        
        callbacks.removeScripts #postImport id:#unityPlugin
    )
)
macroScript UnityExport category:"Unity"
(
    fn loadUnityFbxExportSettings = (
        fbxExportSettings = getINISetting (GetMAXIniFile()) "Unity" "UnityFbxExportSettings"
        if fbxExportSettings != undefined and doesFileExist fbxExportSettings then(
            filein fbxExportSettings
        )
    )

    -- Make sure the FbxExporter plugin is loaded
    pluginManager.loadClass FbxExporter
    
    loadUnityFbxExportSettings()
    
    origSelection = getCurrentSelection()
    exportSet = selectionSets["UnityFbxExportSet"]
    if not isdeleted exportSet and exportSet != undefined then(
        select exportSet
    )
    
    exportFileName = undefined
    if unityFbxFilePathAttr != undefined and unityFbxFileNameAttr != undefined then(
        exportFileName = unityFbxFilePathAttr + unityFbxFileNameAttr
    )
    else(
        unityProjectPath = getINISetting (GetMAXIniFile()) "Unity" "UnityProject"
        exportFileName = getSaveFileName caption:"Export FBX to Unity" filename:(unityProjectPath + "/Assets/") types:"FBX (*.fbx)|*.fbx|"
    )
    
    if exportFileName != undefined then (
        exportFile exportFileName #noPrompt selectedOnly:true using:FBXEXP
    )
    
    if origSelection != undefined then (
        select origSelection
    )
)

fn createUnityActionItem macroName category title parentMenu = (
	local unityAction = menuMan.createActionItem macroName category; --create an ActionItem from the MacroScript
	unityAction.setTitle title;
	unityAction.setUseCustomTitle true;
	parentMenu.addItem unityAction -1;
	unityAction
);

fn createUnityImportAction title parentMenu = (
	createUnityActionItem "UnityImport" "Unity" title parentMenu;
);

fn createUnityExportAction title parentMenu = (
	createUnityActionItem "UnityExport" "Unity" title parentMenu;
);

-- Setup UI in existing Import/Export menus if using 3ds Max 2018+
if (maxVersion())[1] >= 20000 then(
	global importMenuName = "File-Import"
	global exportMenuName = "File-Export"
	
	-- get the import menu
	global getImportMenu
	fn getImportMenu = (
		menuMan.findMenu importMenuName
	);

	-- get the export menu
	global getExportMenu
	fn getExportMenu = (
		menuMan.findMenu exportMenuName
	);
	
	-- Setup UI
	fn setupUnityPluginUI = (
		local importMenu = getImportMenu()
		local exportMenu = getExportMenu()
		if importMenu != undefined and exportMenu != undefined do
		(
			local unityImportTitle = "Import from Unity"
			local unityExportTitle = "Export to Unity"
			
			-- check if menu items already exist, delete if they do
			local foundUnityImport = false
			for i=1 to importMenu.numItems() while not foundUnityImport do(
				local mi = importMenu.getItem i
				if mi.getTitle() == unityImportTitle then(
					importMenu.removeItem mi
					foundUnityImport = true
				)
			)
			local foundUnityExport = false
			for i=1 to exportMenu.numItems() while not foundUnityExport do(
				local mi = exportMenu.getItem i
				if mi.getTitle() == unityExportTitle then(
					exportMenu.removeItem mi
					foundUnityExport = true
				)
			)
			
            id = genClassID returnValue:true
            if menuMan.registerMenuContext id[1] then
            (
                global unityImportAction = createUnityImportAction unityImportTitle importMenu
                global unityExportAction = createUnityExportAction unityExportTitle exportMenu
                
                menuMan.updateMenuBar() --update the menu bar
            )
		)
	);
	setupUnityPluginUI()

	-- Make sure that Menu gets removed at shutdown, force menu to reload each time Max is opened
	callbacks.addScript #preSavingMenus (
		"importMenu = getImportMenu(); \
		 exportMenu = getExportMenu(); \
		 if importMenu != undefined and unityImportAction != undefined then( \
			importMenu.removeItem unityImportAction; \
		 ) \
		 if exportMenu != undefined and unityExportAction != undefined then( \
			exportMenu.removeItem unityExportAction; \
		 )"
	)
)
else if (maxVersion())[1] == 19000 then (
	-- for 3ds Max 2017
	
	global unityMenuName = "Unity"
	
	global getUnityMenu
	fn getUnityMenu = (
		menuMan.findMenu unityMenuName
	);
	
	-- Setup UI
	fn setupUnityPluginUI = (
		local unityMenu = getUnityMenu()
		local unityImportTitle = "Import"
		local unityExportTitle = "Export"
		if unityMenu != undefined do
		(
			-- remove the menu if it still exists
			menuMan.unRegisterMenu unityMenu
		)
		
		id = genClassID returnValue:true
		if menuMan.registerMenuContext id[1] then
		(
			local mainMenuBar = menuMan.getMainMenuBar()
			local unityMenu = menuMan.createMenu unityMenuName
			local unityMenuItem = menuMan.createSubMenuItem unityMenuName unityMenu
			mainMenuBar.addItem unityMenuItem -1
			
			createUnityImportAction unityImportTitle unityMenu
			createUnityExportAction unityExportTitle unityMenu
			
			menuMan.updateMenuBar() --update the menu bar
		)
	);
	setupUnityPluginUI()

	-- Make sure that Menu gets removed at shutdown, force menu to reload each time Max is opened
	callbacks.addScript #preSavingMenus (
		"unityMenu = getUnityMenu(); \
		 if unityMenu != undefined do ( \
			menuMan.unRegisterMenu unityMenu; \
		 )"
	)
)
else(
    print "Warning: Unity Integration not supported for 3ds Max versions earlier than 3ds Max 2017"
)